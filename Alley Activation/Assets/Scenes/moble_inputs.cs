//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.5.1
//     from Assets/Scenes/MOBLIE/moble_inputs.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @Moble_inputs: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @Moble_inputs()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""moble_inputs"",
    ""maps"": [
        {
            ""name"": ""meta"",
            ""id"": ""b9c0b9e8-c6ed-451e-9c5d-74f7111829ba"",
            ""actions"": [
                {
                    ""name"": ""menu"",
                    ""type"": ""Button"",
                    ""id"": ""92345586-2b4d-40f1-8c55-dc7fbd9f6cdf"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""closeGame"",
                    ""type"": ""Button"",
                    ""id"": ""a81ea87b-029d-4fa8-97f6-995c432774c0"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Abutton"",
                    ""type"": ""Button"",
                    ""id"": ""80c88916-8342-4237-8f1d-af5320edbd35"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Bbutton"",
                    ""type"": ""Button"",
                    ""id"": ""3afd4a40-b350-419a-9980-8355cccefcd3"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""trigger"",
                    ""type"": ""Button"",
                    ""id"": ""0ebc34ee-3e7e-4468-b718-c88ee088f4cb"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""stick"",
                    ""type"": ""Value"",
                    ""id"": ""b58c59b8-a57e-48e0-bea0-cc6e79fac4d5"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""c29e7ba5-a8a9-4081-ab07-48581345109d"",
                    ""path"": ""<OculusTouchController>/thumbstickClicked"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""menu"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""2bcdec73-6770-41f8-ac4f-e7ed4d789cce"",
                    ""path"": ""<OculusTouchController>/menu"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""New control scheme"",
                    ""action"": ""closeGame"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""99011ee9-32ba-4418-a22d-a99330b43609"",
                    ""path"": ""<OculusTouchController>/primaryButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""New control scheme"",
                    ""action"": ""Abutton"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""674dff68-3f30-4b62-b515-c63848ff47f1"",
                    ""path"": ""<OculusTouchController>/secondaryButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""New control scheme"",
                    ""action"": ""Bbutton"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""b2570a9c-d117-4e9a-b5b0-82f264d4c6e1"",
                    ""path"": ""<OculusTouchController>{RightHand}/triggerPressed"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""New control scheme"",
                    ""action"": ""trigger"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""45a133b4-1bc1-4e8f-ab29-2e180489646e"",
                    ""path"": ""<OculusTouchController>/thumbstick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""New control scheme"",
                    ""action"": ""stick"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""New control scheme"",
            ""bindingGroup"": ""New control scheme"",
            ""devices"": [
                {
                    ""devicePath"": ""<OculusTouchController>{RightHand}"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
        // meta
        m_meta = asset.FindActionMap("meta", throwIfNotFound: true);
        m_meta_menu = m_meta.FindAction("menu", throwIfNotFound: true);
        m_meta_closeGame = m_meta.FindAction("closeGame", throwIfNotFound: true);
        m_meta_Abutton = m_meta.FindAction("Abutton", throwIfNotFound: true);
        m_meta_Bbutton = m_meta.FindAction("Bbutton", throwIfNotFound: true);
        m_meta_trigger = m_meta.FindAction("trigger", throwIfNotFound: true);
        m_meta_stick = m_meta.FindAction("stick", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // meta
    private readonly InputActionMap m_meta;
    private List<IMetaActions> m_MetaActionsCallbackInterfaces = new List<IMetaActions>();
    private readonly InputAction m_meta_menu;
    private readonly InputAction m_meta_closeGame;
    private readonly InputAction m_meta_Abutton;
    private readonly InputAction m_meta_Bbutton;
    private readonly InputAction m_meta_trigger;
    private readonly InputAction m_meta_stick;
    public struct MetaActions
    {
        private @Moble_inputs m_Wrapper;
        public MetaActions(@Moble_inputs wrapper) { m_Wrapper = wrapper; }
        public InputAction @menu => m_Wrapper.m_meta_menu;
        public InputAction @closeGame => m_Wrapper.m_meta_closeGame;
        public InputAction @Abutton => m_Wrapper.m_meta_Abutton;
        public InputAction @Bbutton => m_Wrapper.m_meta_Bbutton;
        public InputAction @trigger => m_Wrapper.m_meta_trigger;
        public InputAction @stick => m_Wrapper.m_meta_stick;
        public InputActionMap Get() { return m_Wrapper.m_meta; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(MetaActions set) { return set.Get(); }
        public void AddCallbacks(IMetaActions instance)
        {
            if (instance == null || m_Wrapper.m_MetaActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_MetaActionsCallbackInterfaces.Add(instance);
            @menu.started += instance.OnMenu;
            @menu.performed += instance.OnMenu;
            @menu.canceled += instance.OnMenu;
            @closeGame.started += instance.OnCloseGame;
            @closeGame.performed += instance.OnCloseGame;
            @closeGame.canceled += instance.OnCloseGame;
            @Abutton.started += instance.OnAbutton;
            @Abutton.performed += instance.OnAbutton;
            @Abutton.canceled += instance.OnAbutton;
            @Bbutton.started += instance.OnBbutton;
            @Bbutton.performed += instance.OnBbutton;
            @Bbutton.canceled += instance.OnBbutton;
            @trigger.started += instance.OnTrigger;
            @trigger.performed += instance.OnTrigger;
            @trigger.canceled += instance.OnTrigger;
            @stick.started += instance.OnStick;
            @stick.performed += instance.OnStick;
            @stick.canceled += instance.OnStick;
        }

        private void UnregisterCallbacks(IMetaActions instance)
        {
            @menu.started -= instance.OnMenu;
            @menu.performed -= instance.OnMenu;
            @menu.canceled -= instance.OnMenu;
            @closeGame.started -= instance.OnCloseGame;
            @closeGame.performed -= instance.OnCloseGame;
            @closeGame.canceled -= instance.OnCloseGame;
            @Abutton.started -= instance.OnAbutton;
            @Abutton.performed -= instance.OnAbutton;
            @Abutton.canceled -= instance.OnAbutton;
            @Bbutton.started -= instance.OnBbutton;
            @Bbutton.performed -= instance.OnBbutton;
            @Bbutton.canceled -= instance.OnBbutton;
            @trigger.started -= instance.OnTrigger;
            @trigger.performed -= instance.OnTrigger;
            @trigger.canceled -= instance.OnTrigger;
            @stick.started -= instance.OnStick;
            @stick.performed -= instance.OnStick;
            @stick.canceled -= instance.OnStick;
        }

        public void RemoveCallbacks(IMetaActions instance)
        {
            if (m_Wrapper.m_MetaActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IMetaActions instance)
        {
            foreach (var item in m_Wrapper.m_MetaActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_MetaActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public MetaActions @meta => new MetaActions(this);
    private int m_NewcontrolschemeSchemeIndex = -1;
    public InputControlScheme NewcontrolschemeScheme
    {
        get
        {
            if (m_NewcontrolschemeSchemeIndex == -1) m_NewcontrolschemeSchemeIndex = asset.FindControlSchemeIndex("New control scheme");
            return asset.controlSchemes[m_NewcontrolschemeSchemeIndex];
        }
    }
    public interface IMetaActions
    {
        void OnMenu(InputAction.CallbackContext context);
        void OnCloseGame(InputAction.CallbackContext context);
        void OnAbutton(InputAction.CallbackContext context);
        void OnBbutton(InputAction.CallbackContext context);
        void OnTrigger(InputAction.CallbackContext context);
        void OnStick(InputAction.CallbackContext context);
    }
}
