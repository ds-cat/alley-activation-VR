//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.5.1
//     from Assets/Scenes/Input Actions.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @InputActions: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @InputActions()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""Input Actions"",
    ""maps"": [
        {
            ""name"": ""VR"",
            ""id"": ""e9858e10-9249-4126-8c4a-d30a252df14e"",
            ""actions"": [
                {
                    ""name"": ""Teleport"",
                    ""type"": ""Button"",
                    ""id"": ""4e4eb9f0-2c5a-49f7-b268-ceefa2feebb4"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Right Hand Pose"",
                    ""type"": ""PassThrough"",
                    ""id"": ""763f6430-ac21-4091-991f-2c97a7df5f9e"",
                    ""expectedControlType"": ""Vector3"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Left Hand Pose"",
                    ""type"": ""PassThrough"",
                    ""id"": ""0ca52e2f-9256-49ea-91f1-2ebef4bcda2a"",
                    ""expectedControlType"": ""Vector3"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""e33167f6-e397-486b-82aa-c829a7b748ae"",
                    ""path"": ""<XRController>{RightHand}/triggerPressed"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""VR"",
                    ""action"": ""Teleport"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""517c61d2-fa6b-4454-b500-0128a2f2c70c"",
                    ""path"": ""<XRController>{RightHand}/devicePosition"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""VR"",
                    ""action"": ""Right Hand Pose"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""052d7ffa-4970-459e-9327-69100247ef5c"",
                    ""path"": ""<XRController>{LeftHand}/devicePosition"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""VR"",
                    ""action"": ""Left Hand Pose"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""VR"",
            ""bindingGroup"": ""VR"",
            ""devices"": [
                {
                    ""devicePath"": ""<XRController>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
        // VR
        m_VR = asset.FindActionMap("VR", throwIfNotFound: true);
        m_VR_Teleport = m_VR.FindAction("Teleport", throwIfNotFound: true);
        m_VR_RightHandPose = m_VR.FindAction("Right Hand Pose", throwIfNotFound: true);
        m_VR_LeftHandPose = m_VR.FindAction("Left Hand Pose", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // VR
    private readonly InputActionMap m_VR;
    private List<IVRActions> m_VRActionsCallbackInterfaces = new List<IVRActions>();
    private readonly InputAction m_VR_Teleport;
    private readonly InputAction m_VR_RightHandPose;
    private readonly InputAction m_VR_LeftHandPose;
    public struct VRActions
    {
        private @InputActions m_Wrapper;
        public VRActions(@InputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @Teleport => m_Wrapper.m_VR_Teleport;
        public InputAction @RightHandPose => m_Wrapper.m_VR_RightHandPose;
        public InputAction @LeftHandPose => m_Wrapper.m_VR_LeftHandPose;
        public InputActionMap Get() { return m_Wrapper.m_VR; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(VRActions set) { return set.Get(); }
        public void AddCallbacks(IVRActions instance)
        {
            if (instance == null || m_Wrapper.m_VRActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_VRActionsCallbackInterfaces.Add(instance);
            @Teleport.started += instance.OnTeleport;
            @Teleport.performed += instance.OnTeleport;
            @Teleport.canceled += instance.OnTeleport;
            @RightHandPose.started += instance.OnRightHandPose;
            @RightHandPose.performed += instance.OnRightHandPose;
            @RightHandPose.canceled += instance.OnRightHandPose;
            @LeftHandPose.started += instance.OnLeftHandPose;
            @LeftHandPose.performed += instance.OnLeftHandPose;
            @LeftHandPose.canceled += instance.OnLeftHandPose;
        }

        private void UnregisterCallbacks(IVRActions instance)
        {
            @Teleport.started -= instance.OnTeleport;
            @Teleport.performed -= instance.OnTeleport;
            @Teleport.canceled -= instance.OnTeleport;
            @RightHandPose.started -= instance.OnRightHandPose;
            @RightHandPose.performed -= instance.OnRightHandPose;
            @RightHandPose.canceled -= instance.OnRightHandPose;
            @LeftHandPose.started -= instance.OnLeftHandPose;
            @LeftHandPose.performed -= instance.OnLeftHandPose;
            @LeftHandPose.canceled -= instance.OnLeftHandPose;
        }

        public void RemoveCallbacks(IVRActions instance)
        {
            if (m_Wrapper.m_VRActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IVRActions instance)
        {
            foreach (var item in m_Wrapper.m_VRActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_VRActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public VRActions @VR => new VRActions(this);
    private int m_VRSchemeIndex = -1;
    public InputControlScheme VRScheme
    {
        get
        {
            if (m_VRSchemeIndex == -1) m_VRSchemeIndex = asset.FindControlSchemeIndex("VR");
            return asset.controlSchemes[m_VRSchemeIndex];
        }
    }
    public interface IVRActions
    {
        void OnTeleport(InputAction.CallbackContext context);
        void OnRightHandPose(InputAction.CallbackContext context);
        void OnLeftHandPose(InputAction.CallbackContext context);
    }
}
